for https://gitlab.freedesktop.org/gstreamer/gst-plugins-bad/issues/1194

this C++ (not C) program illustrates the problem:

#include<climits>
#include<iostream>

constexpr int fromFloat(float f)
{
    if(f < static_cast<float>(INT_MIN)) { return INT_MIN; }
    if(f >= static_cast<float>(std::int64_t{INT_MAX} + 1)) { return INT_MAX; }
    return static_cast<int>(f);
}
int main()
{
    float f=INT_MAX;
    printf("f=%f if=%d iff=%d\n", f, (int)f, fromFloat(f));
    //^ f=2147483648.000000 if=-2147483648 iff=2147483647
}

diff --git a/ext/ladspa/gstladspautils.c b/ext/ladspa/gstladspautils.c
index d55db6f85..7ee1720b1 100644
--- a/ext/ladspa/gstladspautils.c
+++ b/ext/ladspa/gstladspautils.c
@@ -338,6 +338,18 @@ gst_ladspa_object_class_get_param_name (GstLADSPAClass * ladspa_class,
   return name;
 }
 
+// <fiesh> gentoo_eshoes: INT_MAX is not a power of two, so it doesn't convert well to float
+// <fiesh> gentoo_eshoes: by using INT_MAX + 1, you have power of two
+// <fiesh> gentoo_eshoes: https://godbolt.org/z/Hbfx6v
+// <fiesh> gentoo_eshoes: the fromFloat() function I posted does what your clamp should do
+// thanks to <fiesh> on #gcc freenode irc channel for the C++ variant of the fromFloat function(see above url).
+static const gint fromFloat(gfloat f)
+{
+  if(f < (gfloat)(G_MININT)) { return G_MININT; }
+  if(f >= (gfloat)((int64_t)G_MAXINT + 1)) { return G_MAXINT; }
+  return (gint)(f);
+}
+
 static GParamSpec *
 gst_ladspa_object_class_get_param_spec (GstLADSPAClass * ladspa_class,
     GObjectClass * object_class, unsigned long portnum)
@@ -437,8 +449,8 @@ gst_ladspa_object_class_get_param_spec (GstLADSPAClass * ladspa_class,
 
   if (LADSPA_IS_HINT_INTEGER (hintdesc)) {
     ret =
-        g_param_spec_int (name, name, desc->PortNames[portnum], lower, upper,
-        def, perms);
+        g_param_spec_int (name, name, desc->PortNames[portnum], fromFloat(lower), fromFloat(upper),
+        fromFloat(def), perms);
   } else {
     ret =
         g_param_spec_float (name, name, desc->PortNames[portnum], lower, upper,
