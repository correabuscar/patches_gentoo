when a double panic happens, imma need to see its backtrace too!
FIXME: use static bool to prevent recursion maybe? we'll do this if i ever hit this. Test against this: https://github.com/rust-lang/rust/issues/110771
using force_capture instead of capture() else might get "backtrace disabled" instead!

note: https://github.com/rust-lang/rust/pull/110975

must use rtprintpanic! instead of println! (but could prolly use eprintln! which doesn't alloc) because the latter allocs 1024 bytes when std::io::stdout() gets accessed first time. (not so for stderr() tho, in rust 1.75.0)

Index: /var/tmp/portage/dev-lang/rust-1.75.0-r1/work/rustc-1.75.0-src/library/std/src/panicking.rs
===================================================================
--- .orig/var/tmp/portage/dev-lang/rust-1.75.0-r1/work/rustc-1.75.0-src/library/std/src/panicking.rs
+++ rustc-1.75.0-src/library/std/src/panicking.rs
@@ -746,7 +746,8 @@ fn rust_panic_with_hook(
             panic_count::MustAbort::PanicInHook => {
                 // Don't try to print the message in this case
                 // - perhaps that is causing the recursive panics.
-                rtprintpanic!("thread panicked while processing panic. aborting.\n");
+                rtprintpanic!("thread panicked while processing panic. aborting. msg='{:?}' loc='{:?}'\n",message, location);
+                rtprintpanic!("{}\n", crate::backtrace::Backtrace::force_capture());
             }
             panic_count::MustAbort::AlwaysAbort => {
                 // Unfortunately, this does not print a backtrace, because creating
