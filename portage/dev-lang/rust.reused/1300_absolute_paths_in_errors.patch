this makes them absolute paths NOTJUST in errors!
but mainly that's what I need it for!

thanks to Matthew Brubeck for pointing me to this function (path_args)

XXX: tested this patch to have NO effect on this rustup issue https://github.com/rust-lang/rustup.rs/issues/116#issuecomment-478292664

#diff --git a/src/cargo/core/compiler/mod.rs b/src/cargo/core/compiler/mod.rs
#index 1c6f47b4..183ea925 100644
#--- a/src/tools/cargo/src/cargo/core/compiler/mod.rs
#+++ b/src/tools/cargo/src/cargo/core/compiler/mod.rs
#@@ -695,8 +695,14 @@ fn path_args(bcx: &BuildContext<'_, '_>, unit: &Unit<'_>) -> (PathBuf, PathBuf)
#     };
#     assert!(src.is_absolute());
#     if unit.pkg.package_id().source_id().is_path() {
#-        if let Ok(path) = src.strip_prefix(ws_root) {
#-            return (path.to_path_buf(), ws_root.to_path_buf());
#+        if let Ok(
#+            //path //original line
#+            _  //new line
#+                  ) = src.strip_prefix(ws_root) {
#+            return (
#+                //path.to_path_buf() //(original code line)
#+                src.to_path_buf() //XXX: wanted absolute path for rust.vim to show errors while inside a workspace! (a new code line)
#+                , ws_root.to_path_buf());
#         }
#     }
#     (src, unit.pkg.root().to_path_buf())

Index: /var/tmp/portage/dev-lang/rust-1.64.0-r1/work/rustc-1.64.0-src/src/tools/cargo/src/cargo/util/workspace.rs
===================================================================
--- rustc-1.64.0-src/src/tools/cargo/src/cargo/util/workspace.rs
+++ rustc-1.64.0-src/src/tools/cargo/src/cargo/util/workspace.rs
@@ -116,8 +116,9 @@ pub fn path_args(ws: &Workspace<'_>, uni
     };
     assert!(src.is_absolute());
     if unit.pkg.package_id().source_id().is_path() {
-        if let Ok(path) = src.strip_prefix(ws_root) {
-            return (path.to_path_buf(), ws_root.to_path_buf());
+        if let Ok(_) = src.strip_prefix(ws_root) {
+            //XXX: wanted absolute path for rust.vim to show errors while inside a workspace!
+            return (src.to_path_buf(), ws_root.to_path_buf());
         }
     }
     (src, unit.pkg.root().to_path_buf())
