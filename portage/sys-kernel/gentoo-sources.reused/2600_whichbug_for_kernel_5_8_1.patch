ok it's this BUG
https://bugzilla.kernel.org/show_bug.cgi?id=97231#c6

#for kernel 5.8.1:
Index: /var/tmp/portage/sys-kernel/gentoo-sources-5.8.1/work/linux-5.8.1-gentoo/arch/sh/mm/fault.c
===================================================================
--- .orig/arch/sh/mm/fault.c
+++ linux-5.8.1-gentoo/arch/sh/mm/fault.c
@@ -209,7 +209,7 @@ show_fault_oops(struct pt_regs *regs, un
 		return;
 
 	printk(KERN_ALERT "PC:");
-	pr_alert("BUG: unable to handle kernel %s at %08lx\n",
+	pr_alert("BUG2: unable to handle kernel %s at %08lx\n",
 		 address < PAGE_SIZE ? "NULL pointer dereference"
 				     : "paging request",
 		 address);
#diff --git a/arch/sh/mm/fault.c b/arch/sh/mm/fault.c
#index fbe1f2fe9a8c..bbe4df8c86f0 100644
#--- a/arch/sh/mm/fault.c
#+++ b/arch/sh/mm/fault.c
#for git 5.8-rc2 kernel
#@@ -209,7 +209,7 @@ show_fault_oops(struct pt_regs *regs, unsigned long address)
# 		return;
# 
# 	printk(KERN_ALERT "PC:");
#-	pr_alert("BUG: unable to handle kernel %s at %08lx\n",
#+	pr_alert("BUG2: unable to handle kernel %s at %08lx\n",
# 		 address < PAGE_SIZE ? "NULL pointer dereference"
# 				     : "paging request",
# 		 address);
#for kernel-stable 5.7.2 to 5.7.15
#diff --git a/arch/sh/mm/fault.c b/arch/sh/mm/fault.c
#index a58fec9..1ba4e30 100644
#--- a/arch/sh/mm/fault.c
#+++ b/arch/sh/mm/fault.c
#@@ -208,7 +208,7 @@ show_fault_oops(struct pt_regs *regs, unsigned long address)
# 	if (!oops_may_print())
# 		return;
# 
#-	printk(KERN_ALERT "BUG: unable to handle kernel ");
#+	printk(KERN_ALERT "BUG2: unable to handle kernel ");
# 	if (address < PAGE_SIZE)
# 		printk(KERN_CONT "NULL pointer dereference");
# 	else
#diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
#index ede025f..bc8229c 100644
#--- a/arch/x86/mm/fault.c
#+++ b/arch/x86/mm/fault.c
#@@ -604,7 +604,7 @@ show_fault_oops(struct pt_regs *regs, unsigned long error_code,
# 			printk(smep_warning, from_kuid(&init_user_ns, current_uid()));
# 	}
# 
#-	printk(KERN_ALERT "BUG: unable to handle kernel ");
#+	printk(KERN_ALERT "BUGGY: unable to handle kernel ");
# 	if (address < PAGE_SIZE)
# 		printk(KERN_CONT "NULL pointer dereference");
# 	else
#diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
#index 2aafa6ab6103..a17976a77018 100644
#--- a/arch/x86/mm/fault.c
#+++ b/arch/x86/mm/fault.c
#@@ -668,7 +668,7 @@ show_fault_oops(struct pt_regs *regs, unsigned long error_code,
# 				from_kuid(&init_user_ns, current_uid()));
# 	}
# 
#-	pr_alert("BUG: unable to handle kernel %s at %px\n",
#+	pr_alert("BUGGY: unable to handle kernel %s at %px\n",
# 		 address < PAGE_SIZE ? "NULL pointer dereference" : "paging request",
# 		 (void *)address);
# 
diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
index 46df4c6aae46..5ffffcf8f61c 100644
--- a/arch/x86/mm/fault.c
+++ b/arch/x86/mm/fault.c
@@ -629,10 +629,10 @@ show_fault_oops(struct pt_regs *regs, unsigned long error_code, unsigned long ad
 	}
 
 	if (address < PAGE_SIZE && !user_mode(regs))
-		pr_alert("BUG: kernel NULL pointer dereference, address: %px\n",
+		pr_alert("BUGGY: kernel NULL pointer dereference, address: %px\n",
 			(void *)address);
 	else
-		pr_alert("BUG: unable to handle page fault for address: %px\n",
+		pr_alert("BUGGY: unable to handle page fault for address: %px\n",
 			(void *)address);
 
 	pr_alert("#PF: %s %s in %s mode\n",
