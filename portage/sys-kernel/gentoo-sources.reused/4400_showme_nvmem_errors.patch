updated for 5.0-rc1

diff --git a/drivers/rtc/nvmem.c b/drivers/rtc/nvmem.c
index dce518d5e50e..4b59569a410a 100644
--- a/drivers/rtc/nvmem.c
+++ b/drivers/rtc/nvmem.c
@@ -77,6 +77,17 @@ static void rtc_nvram_unregister(struct rtc_device *rtc)
 	rtc->nvram = NULL;
 }
 
+#define NVMEMUSTR "nvmem"
+#define _prik2(fmt, a...) printk(fmt " {%s %s:%i}\n", ##a, __func__, __FILE__, __LINE__ )
+//KERN_* from: include/linux/kern_levels.h
+#define _prik3(typ, fmt, a...) _prik2( typ NVMEMUSTR ": " fmt, ##a)
+//NOTE: do not include your own \n when using these:
+#define printka(fmt, a...) _prik3(KERN_ALERT, fmt, ##a)
+#define printkw(fmt, a...) _prik3(KERN_WARNING, fmt, ##a)
+#define printkn(fmt, a...) _prik3(KERN_NOTICE, fmt, ##a)
+#define printki(fmt, a...) _prik3(KERN_INFO, fmt, ##a)
+#define printkd(fmt, a...) _prik3(KERN_DEBUG, fmt, ##a)
+
 /*
  * New ABI, uses nvmem
  */
@@ -85,18 +96,24 @@ int rtc_nvmem_register(struct rtc_device *rtc,
 {
 	struct nvmem_device *nvmem;
 
-	if (!nvmem_config)
+	if (!nvmem_config) {
+    printka("Failing with -ENODEV == %d", -ENODEV);
 		return -ENODEV;
+  }
 
 	nvmem_config->dev = rtc->dev.parent;
 	nvmem_config->owner = rtc->owner;
 	nvmem = devm_nvmem_register(rtc->dev.parent, nvmem_config);
-	if (IS_ERR(nvmem))
+	if (IS_ERR(nvmem)) {
+    printka("Failing with PTR_ERR(nvmem) == %d", PTR_ERR(nvmem));
 		return PTR_ERR(nvmem);
+  }
 
 	/* Register the old ABI */
-	if (rtc->nvram_old_abi)
-		rtc_nvram_register(rtc, nvmem, nvmem_config->size);
+	if (rtc->nvram_old_abi) {
+    int ret= rtc_nvram_register(rtc, nvmem, nvmem_config->size);
+    printki("rtc_nvram_register() ret==",ret);
+  }
 
 	return 0;
 }
diff --git a/drivers/rtc/rtc-cmos.c b/drivers/rtc/rtc-cmos.c
index 1b3738a11702..2fef6e56bc2a 100644
--- a/drivers/rtc/rtc-cmos.c
+++ b/drivers/rtc/rtc-cmos.c
@@ -814,8 +814,13 @@ cmos_do_probe(struct device *dev, struct resource *ports, int rtc_irq)
 
 	/* export at least the first block of NVRAM */
 	nvmem_cfg.size = address_space - NVRAM_OFFSET;
+
+#ifdef CONFIG_RTC_NVMEM
 	if (rtc_nvmem_register(cmos_rtc.rtc, &nvmem_cfg))
-		dev_err(dev, "nvmem registration failed\n");
+		dev_err(dev, "nvmem registration failed\n"); //always hit when CONFIG_RTC_NVMEM is not defined, as per include/linux/rtc.h , it always returns -ENODEV; unconditionally!
+#else
+  dev_info(dev, "ignoring nvmem due to undefined CONFIG_RTC_NVMEM\n");
+#endif
 
 	dev_info(dev, "%s%s, %d bytes nvram%s\n",
 		 !is_valid_irq(rtc_irq) ? "no alarms" :
