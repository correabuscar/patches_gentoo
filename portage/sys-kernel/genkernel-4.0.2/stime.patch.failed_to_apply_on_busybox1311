--- a/dev/null	2020-02-15 08:39:16.688922194 +0100
+++ b/patches/busybox/1.31.1/d3539be8f27b8cbfdfee460fe08299158f08bcd9.patch	2020-02-15 14:52:52.963111464 +0100
@@ -0,0 +1,86 @@
+commit d3539be8f27b8cbfdfee460fe08299158f08bcd9
+Author: Alistair Francis <alistair.francis@wdc.com>
+Date:   Tue Nov 19 13:06:40 2019 +0100
+
+    Remove stime() function calls
+    
+    stime() has been deprecated in glibc 2.31 and replaced with
+    clock_settime(). Let's replace the stime() function calls with
+    clock_settime() in preperation.
+    
+    function                                             old     new   delta
+    rdate_main                                           197     224     +27
+    clock_settime                                          -      27     +27
+    date_main                                            926     941     +15
+    stime                                                 37       -     -37
+    ------------------------------------------------------------------------------
+    (add/remove: 2/2 grow/shrink: 2/0 up/down: 69/-37)             Total: 32 bytes
+    
+    Signed-off-by: Alistair Francis <alistair.francis@wdc.com>
+    Signed-off-by: Denys Vlasenko <vda.linux@googlemail.com>
+
+diff --git a/coreutils/date.c b/coreutils/date.c
+index f7e9a8d0e..b9b7fd2cb 100644
+--- a/coreutils/date.c
++++ b/coreutils/date.c
+@@ -276,6 +276,9 @@ int date_main(int argc UNUSED_PARAM, char **argv)
+ 		time(&ts.tv_sec);
+ #endif
+ 	}
++#if !ENABLE_FEATURE_DATE_NANO
++	ts.tv_nsec = 0;
++#endif
+ 	localtime_r(&ts.tv_sec, &tm_time);
+ 
+ 	/* If date string is given, update tm_time, and maybe set date */
+@@ -298,9 +301,10 @@ int date_main(int argc UNUSED_PARAM, char **argv)
+ 		if (date_str[0] != '@')
+ 			tm_time.tm_isdst = -1;
+ 		ts.tv_sec = validate_tm_time(date_str, &tm_time);
++		ts.tv_nsec = 0;
+ 
+ 		/* if setting time, set it */
+-		if ((opt & OPT_SET) && stime(&ts.tv_sec) < 0) {
++		if ((opt & OPT_SET) && clock_settime(CLOCK_REALTIME, &ts) < 0) {
+ 			bb_simple_perror_msg("can't set date");
+ 		}
+ 	}
+diff --git a/libbb/missing_syscalls.c b/libbb/missing_syscalls.c
+index 87cf59b3d..dc40d9155 100644
+--- a/libbb/missing_syscalls.c
++++ b/libbb/missing_syscalls.c
+@@ -15,14 +15,6 @@ pid_t getsid(pid_t pid)
+ 	return syscall(__NR_getsid, pid);
+ }
+ 
+-int stime(const time_t *t)
+-{
+-	struct timeval tv;
+-	tv.tv_sec = *t;
+-	tv.tv_usec = 0;
+-	return settimeofday(&tv, NULL);
+-}
+-
+ int sethostname(const char *name, size_t len)
+ {
+ 	return syscall(__NR_sethostname, name, len);
+diff --git a/util-linux/rdate.c b/util-linux/rdate.c
+index 41aade5ea..bb1dc519a 100644
+--- a/util-linux/rdate.c
++++ b/util-linux/rdate.c
+@@ -95,9 +95,13 @@ int rdate_main(int argc UNUSED_PARAM, char **argv)
+ 	if (!(flags & 2)) { /* no -p (-s may be present) */
+ 		if (time(NULL) == remote_time)
+ 			bb_simple_error_msg("current time matches remote time");
+-		else
+-			if (stime(&remote_time) < 0)
++		else {
++			struct timespec ts;
++			ts.tv_sec = remote_time;
++			ts.tv_nsec = 0;
++			if (clock_settime(CLOCK_REALTIME, &ts) < 0)
+ 				bb_simple_perror_msg_and_die("can't set time of day");
++		}
+ 	}
+ 
+ 	if (flags != 1) /* not lone -s */
