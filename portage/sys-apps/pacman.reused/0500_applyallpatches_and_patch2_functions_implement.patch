this is tested in /home/user/sandbox/patch2_testing

diff --git a/scripts/libmakepkg/util/message.sh.in b/scripts/libmakepkg/util/message.sh.in
index 097da2b2..4222c02d 100644
--- a/scripts/libmakepkg/util/message.sh.in
+++ b/scripts/libmakepkg/util/message.sh.in
@@ -75,3 +75,136 @@ error() {
 	local mesg=$1; shift
 	printf "${RED}==> $(gettext "ERROR:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
 }
+
+patch2() {
+  # this will set the timestamp(atime+mtime) of all patched files to the same one that the patch file itself has!
+  #set -v
+  #set +e
+  local fil="${1}"
+  shift 1
+  if test -z "$fil"; then
+    echo "!! patch2() inner pacman function called without any args, expected only the patch file as first arg!" >&2
+    return 1
+  fi
+  if test "$#" -gt "0"; then
+    echo "!! patch2() inner pacman function called with more than one args, expected only the patch file as first arg!" >&2
+    return 1
+  fi
+  if ! test -f "$fil"; then
+    echo "!! patch file '$fil' doesn't exist as a regular file?!" >&2
+    return 2
+  fi
+  if ! test -r "$fil"; then
+    echo "!! patch file '$fil' exists but isn't readable by me!" >&2
+    return 3
+  fi
+  #patch "$@" "$fil"; local ec="$?"
+  #if you change --strip value of 1 to something else, you've to modify the below 'sed' too!
+  patch -F0 -N --strip=1 -i "$fil"; local ec="$?"
+  if test "0$ec" != "00"; then
+    echo "!! patch2 failed(ec=$ec) to apply patch file '$fil' !" >&2
+    return 7
+  fi
+  local atime
+  atime="$(stat --dereference --printf=%X -- "$fil")"
+  if test -z "$atime"; then
+    echo "!! failed to get patch file '$fil' 's atime!" >&2
+    return 4
+  fi
+  local mtime
+  mtime="$(stat --dereference --printf=%Y -- "$fil")"
+  if test -z "$mtime"; then
+    echo "!! failed to get patch file '$fil' 's mtime!" >&2
+    return 5
+  fi
+  local allfilespatched
+  # shellcheck disable=SC2207
+  allfilespatched=( $(cat -- "$fil" |
+    #grep -F '+++ '|cut -f2- -d' '|sed -e 's/^b\///' #no good
+    #grep '^+++ '|cut -f1 -d$'\t'|sed -e 's/^+++ b\///' #no good for: +++ patched/modules/gui/qt/util/input_slider.cpp
+    grep '^+++ '|cut -f1 -d$'\t' |sed -re 's/^\+\+\+ [^/]*\///; s/\r//g' #hardcoded --strip=1 behavior!
+      ) )
+  for thefile in "${allfilespatched[@]}"; do
+    if test -w "$thefile"; then  #file is writable by me, else how would've 'patch' succeeded patching it?!
+      #set -e
+      #eval "$(retouch "$fil" |tail -n1)"
+      #set +e
+      touch "--date=@$atime" --no-dereference --time=atime -- "$thefile"; ec="$?"
+      if test "0$ec" != "00"; then
+        echo "!! patch2's touch portion failed(ec=$ec) to set atime for patched file '$thefile' to the same atime as patch file '$fil' !" >&2
+        return 8
+      fi
+      check_atime="$(stat --dereference --printf=%X -- "$thefile")"
+      if test "$atime" != "$check_atime"; then
+        echo "!! patch2's touch portion failed to set properly set atime($atime) for patched file '$thefile' to the same atime as patch file '$fil' ! It set it to '$check_atime' instead!" >&2
+        return 10
+      fi
+      touch "--date=@$mtime" --no-dereference --time=mtime -- "$thefile"; ec="$?"
+      if test "0$ec" != "00"; then
+        echo "!! patch2's touch portion failed(ec=$ec) to set mtime for patched file '$thefile' to the same mtime as patch file '$fil' !" >&2
+        return 9
+      fi
+      check_mtime="$(stat --dereference --printf=%Y -- "$thefile")"
+      if test "$mtime" != "$check_mtime"; then
+        echo "!! patch2's touch portion failed to set properly set mtime($mtime) for patched file '$thefile' to the same mtime as patch file '$fil' ! It set it to '$check_mtime' instead!" >&2
+        return 11
+      fi
+    else
+      if test "$thefile" == "dev/null" -o "$thefile" == "/dev/null"; then
+        echo "!! ignoring '$thefile'(ie. some file got removed/deleted) from patch '$fil'" >&2
+      else
+        echo "!! the patched file '$thefile' doesn't exist while read from patch '$fil' ! (this might require fixing the code within pacman's patch2() function in scripts/libmakepkg/util/message.sh.in)" >&2
+        return 6
+      fi
+    fi
+  done
+  return 0 #all good, nonzero is bad! this just works with return due to set -e being in effect during the execution of these, so a non-zero return will fail the whole makepkg/pacman execution
+  #set +v
+  #set -e
+
+#close but not perfect(those .000000000 is obvious sign the granularity is the second(s)):
+#$ stat src/bootstrap/tool.rs ../tools_are_never_optional.patch
+#  File: src/bootstrap/tool.rs
+#  Size: 24296     	Blocks: 48         IO Block: 4096   regular file
+#Device: 15h/21d	Inode: 18461055    Links: 1
+#Access: (0644/-rw-r--r--)  Uid: ( 1000/    user)   Gid: ( 1000/    user)
+#Access: 2019-06-16 14:46:32.000000000 +0200
+#Modify: 2019-06-16 14:46:32.000000000 +0200
+#Change: 2019-06-17 11:50:30.474906740 +0200
+# Birth: 2019-06-17 11:50:30.466906740 +0200
+#  File: ../tools_are_never_optional.patch
+#  Size: 817       	Blocks: 8          IO Block: 4096   regular file
+#Device: 15h/21d	Inode: 18264632    Links: 1
+#Access: (0644/-rw-r--r--)  Uid: ( 1000/    user)   Gid: ( 1000/    user)
+#Access: 2019-06-16 14:46:32.700963386 +0200
+#Modify: 2019-06-16 14:46:32.700963386 +0200
+#Change: 2019-06-16 14:46:32.711963386 +0200
+# Birth: 2019-06-16 14:46:32.700963386 +0200
+
+}
+applyallpatches() {
+  if test "$#" -ne "0"; then
+    error "Too many args($#) passed to bash function '$FUNCNAME'" #not using $@ because it only shows the first one, for wtw reason!
+    msg2 "Set bash array 'allpatches' to add some patch files and don't forget to append the following after the 'sources' array: source+=(\"\${allpatches[@]}\")"
+    msg2 "Then call this very function($FUNCNAME) without args in your prepare()"
+    exit 1
+  fi
+
+  #  for eachindex in `seq 0 1 $(( "${#allpatches[@]}" -1 ))`; do
+  local arlen="${#allpatches[@]}" #get/compute length only once during 'for'
+  #( #don't bleed the 'for' var outside this subshell block; still bleeds it if using {} parens instead of subshell () ones
+  if test "$arlen" -le "0"; then
+    msg2 "No patches to apply."
+  else
+    local i #don't bleed the for variable outside of this function
+    for (( i=1; i <= "${arlen}" ; i++ )); do
+      local patchfile="${allpatches[ $i - 1 ]%%::*}" #strip away the "::suffix" part eg. "filename::git+https://blahblah"
+      msg2 "[${i}/${arlen}] Applying patch '${patchfile}'"
+      #patch -Np1 -i "${srcdir}/${patchfile}" -F0 -Np1 -i
+      #for patch2, the file comes first, any args for patch afterwards!
+      patch2 "${srcdir}/${patchfile}" #-F0 -N --strip=1 -i
+    done
+  fi
+  #)
+}
+
