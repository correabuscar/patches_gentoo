this is noautomaticWKDupdates_1of2.patch for portage-2.3.89 (last tested on 2.3.96-r1)
it also needs noautomaticWKDupdates_2of2.patch for gemato! (which should be already in place)

it adds `emerge` arg: --forceWKDupdate [ n | y]  which defaults to 'n'
it's to be used with `emerge --sync` to allow WKD to be updated or not
if WKD is forced then if it fails it won't try to update keys via keyserver (as it would without this patch)

so without updating keys from WKD(or keyserver) the only keys left to use is/are:
/usr/share/openpgp-keys/gentoo-release.asc
which is owned by package app-crypt/openpgp-keys-gentoo-release-20191030

this should be safer(security-wise) than updating keys from WKD on every `emerge --sync` !!

#Index: /usr/lib64/python3.6/site-packages/portage/sync/syncbase.py
#===================================================================
#--- orig/lib/portage/sync/syncbase.py
#+++ mod/lib/portage/sync/syncbase.py
#@@ -253,11 +253,20 @@ class SyncBase(object):
# 		"""
# 		out = portage.output.EOutput(quiet=('--quiet' in self.options['emerge_config'].opts))
# 		out.ebegin('Refreshing keys via WKD')
#-		if openpgp_env.refresh_keys_wkd():
#+		if openpgp_env.refresh_keys_wkd(Force=True):  #Force=True differentiates from other calls to refresh_keys_wkd, if any! yes at least one: gemato verify /var/db/repos/gentoo -K /usr/share/openpgp-keys/gentoo-release.asc --one-file-system --require-signed-manifest  --debug
# 			out.eend(0)
# 			return
# 		out.eend(1)
#-
#+		#print(openpgp_env) #it's a complex object TODO: how to print it!
#+		#actually I won't be needing WKD refresh because since I'm sync-ing daily I won't miss an update to:
#+		#app-crypt/openpgp-keys-gentoo-release-20191030 (/usr/share/openpgp-keys/gentoo-release.asc)
#+		# which has that .asc key which would be kept up to date!
#+		#otherwise gemato wkd will make a /tmp/ dir to import keys into and use it to verify the repo, which means
#+		# it can be temporarily fooled (since it's just fetching keys via https, and BGP hijacking is a thing) into
#+		# fetching evil keys, coupled with similar mitm rsync-ed repo, bam hijacked system, if even just temporarily
#+		# you won't even know if it happened, since next rsync/wkd could be normal, once the rootkit hid and cleaned up.
#+		raise Exception("WKD refresh failed!")
#+		#yeah don't use keyserver from below!
# 		out.ebegin('Refreshing keys from keyserver{}'.format(
# 			('' if self.repo.sync_openpgp_keyserver is None else ' ' + self.repo.sync_openpgp_keyserver)))
# 		retry_decorator = self._key_refresh_retry_decorator()
#Index: /usr/lib64/python3.6/site-packages/_emerge/main.py
#===================================================================
#--- orig/lib/_emerge/main.py
#+++ mod/lib/_emerge/main.py
#@@ -126,6 +126,7 @@ def insert_optional_args(args):
# 	default_arg_opts = {
# 		'--alert'                : y_or_n,
# 		'--ask'                  : y_or_n,
#+		'--forceWKDupdate'                  : y_or_n, #see also myoptions.forceWKDupdate
# 		'--autounmask'           : y_or_n,
# 		'--autounmask-continue'  : y_or_n,
# 		'--autounmask-only'      : y_or_n,
#@@ -325,6 +326,11 @@ def parse_opts(tmpcmdline, silent=False)
# 			"choices" : true_y_or_n
# 		},
# 
#+		"--forceWKDupdate": {
#+			"help"    : "use with --sync, force or not(default) WKD update of gpg keys; if 'n' aka default, it will just use /usr/share/openpgp-keys/gentoo-release.asc which comes from package app-crypt/openpgp-keys-gentoo-release-20191030 ! Only use 'y' if you need it, otherwise it can open your system to compromise.",
#+			"choices" : true_y_or_n
#+		},
#+
# 		"--autounmask": {
# 			"help"    : "automatically unmask packages",
# 			"choices" : true_y_or_n
#@@ -836,6 +842,11 @@ def parse_opts(tmpcmdline, silent=False)
# 	else:
# 		myoptions.ask = None
# 
#+	if myoptions.forceWKDupdate in true_y:
#+		myoptions.forceWKDupdate = True
#+	else:
#+		myoptions.forceWKDupdate = None
#+
# 	if myoptions.autounmask in true_y:
# 		myoptions.autounmask = True
# 
#Index: /usr/lib64/python3.6/site-packages/portage/sync/modules/rsync/rsync.py
#===================================================================
#--- orig/lib/portage/sync/modules/rsync/rsync.py
#+++ mod/lib/portage/sync/modules/rsync/rsync.py
#@@ -153,7 +153,8 @@ class RsyncSync(NewBase):
# 					out.einfo('Using keys from %s' % (self.repo.sync_openpgp_key_path,))
# 					with io.open(self.repo.sync_openpgp_key_path, 'rb') as f:
# 						openpgp_env.import_key(f)
#-					self._refresh_keys(openpgp_env)
#+					if "--forceWKDupdate" in opts:
#+						self._refresh_keys(openpgp_env)
# 				except (GematoException, asyncio.TimeoutError) as e:
# 					writemsg_level("!!! Manifest verification impossible due to keyring problem:\n%s\n"
# 							% (e,),
#Index: /usr/lib64/python3.6/site-packages/portage/sync/modules/webrsync/webrsync.py
#===================================================================
#--- orig/lib/portage/sync/modules/webrsync/webrsync.py
#+++ mod/lib/portage/sync/modules/webrsync/webrsync.py
#@@ -86,7 +86,8 @@ class WebRsync(SyncBase):
# 					out.einfo('Using keys from %s' % (self.repo.sync_openpgp_key_path,))
# 					with io.open(self.repo.sync_openpgp_key_path, 'rb') as f:
# 						openpgp_env.import_key(f)
#-					self._refresh_keys(openpgp_env)
#+					if "--forceWKDupdate" in opts:
#+						self._refresh_keys(openpgp_env)
# 					self.spawn_kwargs["env"]["PORTAGE_GPG_DIR"] = openpgp_env.home
# 					self.spawn_kwargs["env"]["PORTAGE_TEMP_GPG_DIR"] = openpgp_env.home
# 				except (GematoException, asyncio.TimeoutError) as e:
#Index: /usr/lib64/python3.6/site-packages/portage/sync/modules/git/git.py
#===================================================================
#--- orig/lib/portage/sync/modules/git/git.py
#+++ mod/lib/portage/sync/modules/git/git.py
#@@ -224,7 +224,8 @@ class GitSync(NewBase):
# 					out.einfo('Using keys from %s' % (self.repo.sync_openpgp_key_path,))
# 					with io.open(self.repo.sync_openpgp_key_path, 'rb') as f:
# 						openpgp_env.import_key(f)
#-					self._refresh_keys(openpgp_env)
#+					if "--forceWKDupdate" in opts:
#+						self._refresh_keys(openpgp_env)
# 				except (GematoException, asyncio.TimeoutError) as e:
# 					writemsg_level("!!! Verification impossible due to keyring problem:\n%s\n"
# 							% (e,),

#for portage: 3.0.30-r1
Index: /var/tmp/portage/sys-apps/portage-3.0.30-r1/work/portage-3.0.30/lib/_emerge/main.py
===================================================================
--- portage-3.0.30/lib/_emerge/main.py
+++ portage-3.0.30/lib/_emerge/main.py
@@ -133,14 +133,15 @@ def insert_optional_args(args):
     )
 
     new_args = []
 
     default_arg_opts = {
         "--alert": y_or_n,
         "--ask": y_or_n,
+        '--forceWKDupdate': y_or_n, #see also myoptions.forceWKDupdate
         "--autounmask": y_or_n,
         "--autounmask-continue": y_or_n,
         "--autounmask-only": y_or_n,
         "--autounmask-keep-keywords": y_or_n,
         "--autounmask-keep-masks": y_or_n,
         "--autounmask-unrestricted-atoms": y_or_n,
         "--autounmask-write": y_or_n,
@@ -346,14 +347,18 @@ def parse_opts(tmpcmdline, silent=False)
             "choices": true_y_or_n,
         },
         "--ask": {
             "shortopt": "-a",
             "help": "prompt before performing any actions",
             "choices": true_y_or_n,
         },
+        "--forceWKDupdate": {
+            "help"    : "use with --sync, force or not(default) WKD update of gpg keys; if 'n' aka default, it will just use /usr/share/openpgp-keys/gentoo-release.asc which comes from package app-crypt/openpgp-keys-gentoo-release-20191030 ! Only use 'y' if you need it, otherwise it can open your system to compromise.",
+            "choices" : true_y_or_n
+        },
         "--autounmask": {
             "help": "automatically unmask packages",
             "choices": true_y_or_n,
         },
         "--autounmask-backtrack": {
             "help": (
                 "continue backtracking when there are autounmask "
@@ -791,15 +796,18 @@ def parse_opts(tmpcmdline, silent=False)
     else:
         myoptions.alert = None
 
     if myoptions.ask in true_y:
         myoptions.ask = True
     else:
         myoptions.ask = None
-
+    if myoptions.forceWKDupdate in true_y:
+        myoptions.forceWKDupdate = True
+    else:
+        myoptions.forceWKDupdate = None
     if myoptions.autounmask in true_y:
         myoptions.autounmask = True
 
     if myoptions.autounmask_continue in true_y:
         myoptions.autounmask_continue = True
 
     if myoptions.autounmask_only in true_y:
Index: /var/tmp/portage/sys-apps/portage-3.0.30-r1/work/portage-3.0.30/lib/portage/sync/modules/git/git.py
===================================================================
--- portage-3.0.30/lib/portage/sync/modules/git/git.py
+++ portage-3.0.30/lib/portage/sync/modules/git/git.py
@@ -266,15 +266,16 @@ class GitSync(NewBase):
             out = EOutput()
             env = None
             if openpgp_env is not None and self.repo.sync_openpgp_key_path is not None:
                 try:
                     out.einfo("Using keys from %s" % (self.repo.sync_openpgp_key_path,))
                     with io.open(self.repo.sync_openpgp_key_path, "rb") as f:
                         openpgp_env.import_key(f)
-                    self._refresh_keys(openpgp_env)
+                    if "--forceWKDupdate" in opts:
+                        self._refresh_keys(openpgp_env)
                 except (GematoException, asyncio.TimeoutError) as e:
                     writemsg_level(
                         "!!! Verification impossible due to keyring problem:\n%s\n"
                         % (e,),
                         level=logging.ERROR,
                         noiselevel=-1,
                     )
Index: /var/tmp/portage/sys-apps/portage-3.0.30-r1/work/portage-3.0.30/lib/portage/sync/modules/rsync/rsync.py
===================================================================
--- portage-3.0.30/lib/portage/sync/modules/rsync/rsync.py
+++ portage-3.0.30/lib/portage/sync/modules/rsync/rsync.py
@@ -159,15 +159,16 @@ class RsyncSync(NewBase):
             # will not be performed and the user will have to fix it and try again,
             # so we may as well bail out before actual rsync happens.
             if openpgp_env is not None and self.repo.sync_openpgp_key_path is not None:
                 try:
                     out.einfo("Using keys from %s" % (self.repo.sync_openpgp_key_path,))
                     with io.open(self.repo.sync_openpgp_key_path, "rb") as f:
                         openpgp_env.import_key(f)
-                    self._refresh_keys(openpgp_env)
+                    if "--forceWKDupdate" in opts:
+                        self._refresh_keys(openpgp_env)
                 except (GematoException, asyncio.TimeoutError) as e:
                     writemsg_level(
                         "!!! Manifest verification impossible due to keyring problem:\n%s\n"
                         % (e,),
                         level=logging.ERROR,
                         noiselevel=-1,
                     )
Index: /var/tmp/portage/sys-apps/portage-3.0.30-r1/work/portage-3.0.30/lib/portage/sync/modules/webrsync/webrsync.py
===================================================================
--- portage-3.0.30/lib/portage/sync/modules/webrsync/webrsync.py
+++ portage-3.0.30/lib/portage/sync/modules/webrsync/webrsync.py
@@ -96,15 +96,16 @@ class WebRsync(SyncBase):
                 openpgp_env = self._get_openpgp_env(self.repo.sync_openpgp_key_path)
 
                 out = portage.output.EOutput(quiet=quiet)
                 try:
                     out.einfo("Using keys from %s" % (self.repo.sync_openpgp_key_path,))
                     with io.open(self.repo.sync_openpgp_key_path, "rb") as f:
                         openpgp_env.import_key(f)
-                    self._refresh_keys(openpgp_env)
+                    if "--forceWKDupdate" in opts:
+                        self._refresh_keys(openpgp_env)
                     self.spawn_kwargs["env"]["PORTAGE_GPG_DIR"] = openpgp_env.home
                     self.spawn_kwargs["env"]["PORTAGE_TEMP_GPG_DIR"] = openpgp_env.home
                 except (GematoException, asyncio.TimeoutError) as e:
                     writemsg_level(
                         "!!! Verification impossible due to keyring problem:\n%s\n"
                         % (e,),
                         level=logging.ERROR,
Index: /var/tmp/portage/sys-apps/portage-3.0.30-r1/work/portage-3.0.30/lib/portage/sync/syncbase.py
===================================================================
--- portage-3.0.30/lib/portage/sync/syncbase.py
+++ portage-3.0.30/lib/portage/sync/syncbase.py
@@ -282,19 +282,28 @@ class SyncBase:
             out.ewarn(
                 "setting, and this is a security vulnerability because it prevents"
             )
             out.ewarn("detection of revoked keys!")
             return
 
         out.ebegin("Refreshing keys via WKD")
-        if openpgp_env.refresh_keys_wkd():
+        if openpgp_env.refresh_keys_wkd(Force=True):  #Force=True differentiates from other calls to refresh_keys_wkd, if any! yes at least one: gemato verify /var/db/repos/gentoo -K /usr/share/openpgp-keys/gentoo-release.asc --one-file-system --require-signed-manifest  --debug
             out.eend(0)
             return
         out.eend(1)
-
+        #print(openpgp_env) #it's a complex object TODO: how to print it!
+        #actually I won't be needing WKD refresh because since I'm sync-ing daily I won't miss an update to:
+        #app-crypt/openpgp-keys-gentoo-release-20191030 (/usr/share/openpgp-keys/gentoo-release.asc)
+        # which has that .asc key which would be kept up to date!
+        #otherwise gemato wkd will make a /tmp/ dir to import keys into and use it to verify the repo, which means
+        # it can be temporarily fooled (since it's just fetching keys via https, and BGP hijacking is a thing) into
+        # fetching evil keys, coupled with similar mitm rsync-ed repo, bam hijacked system, if even just temporarily
+        # you won't even know if it happened, since next rsync/wkd could be normal, once the rootkit hid and cleaned up.
+        raise Exception("WKD refresh failed!")
+        #yeah don't use keyserver from below!
         out.ebegin(
             "Refreshing keys from keyserver{}".format(
                 (
                     ""
                     if self.repo.sync_openpgp_keyserver is None
                     else " " + self.repo.sync_openpgp_keyserver
                 )
