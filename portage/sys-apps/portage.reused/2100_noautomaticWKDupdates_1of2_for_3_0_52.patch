this is noautomaticWKDupdates_1of2.patch for portage-2.3.89 (last tested on 2.3.96-r1)
it also needs noautomaticWKDupdates_2of2.patch for gemato! (which should be already in place)

it adds `emerge` arg: --forceWKDupdate [ n | y]  which defaults to 'n'
it's to be used with `emerge --sync` to allow WKD to be updated or not
if WKD is forced then if it fails it won't try to update keys via keyserver (as it would without this patch)

so without updating keys from WKD(or keyserver) the only keys left to use is/are:
/usr/share/openpgp-keys/gentoo-release.asc
which is owned by package app-crypt/openpgp-keys-gentoo-release-20191030

this should be safer(security-wise) than updating keys from WKD on every `emerge --sync` !!

FIXME: since sys-apps/portage-3.0.52, the webrsync part doesn't honor --forceWKDupdate, ie. need to update the patch for it, as they changed the code too much!

#for portage 3.0.44:

Index: /var/tmp/portage/sys-apps/portage-3.0.44/work/portage-3.0.44/lib/_emerge/main.py
===================================================================
--- .orig/var/tmp/portage/sys-apps/portage-3.0.44/work/portage-3.0.44/lib/_emerge/main.py
+++ portage-3.0.44/lib/_emerge/main.py
@@ -137,6 +137,7 @@ def insert_optional_args(args):
     default_arg_opts = {
         "--alert": y_or_n,
         "--ask": y_or_n,
+        '--forceWKDupdate': y_or_n, #see also myoptions.forceWKDupdate
         "--autounmask": y_or_n,
         "--autounmask-continue": y_or_n,
         "--autounmask-only": y_or_n,
@@ -350,6 +351,10 @@ def parse_opts(tmpcmdline, silent=False)
             "help": "prompt before performing any actions",
             "choices": true_y_or_n,
         },
+        "--forceWKDupdate": {
+            "help"    : "use with --sync, force or not(default) WKD update of gpg keys; if 'n' aka default, it will just use /usr/share/openpgp-keys/gentoo-release.asc which comes from package app-crypt/openpgp-keys-gentoo-release-20191030 ! Only use 'y' if you need it, otherwise it can open your system to compromise.",
+            "choices" : true_y_or_n
+        },
         "--autounmask": {
             "help": "automatically unmask packages",
             "choices": true_y_or_n,
@@ -796,7 +801,10 @@ def parse_opts(tmpcmdline, silent=False)
         myoptions.ask = True
     else:
         myoptions.ask = None
-
+    if myoptions.forceWKDupdate in true_y:
+        myoptions.forceWKDupdate = True
+    else:
+        myoptions.forceWKDupdate = None
     if myoptions.autounmask in true_y:
         myoptions.autounmask = True
 
Index: /var/tmp/portage/sys-apps/portage-3.0.44/work/portage-3.0.44/lib/portage/sync/modules/git/git.py
===================================================================
--- .orig/var/tmp/portage/sys-apps/portage-3.0.44/work/portage-3.0.44/lib/portage/sync/modules/git/git.py
+++ portage-3.0.44/lib/portage/sync/modules/git/git.py
@@ -421,7 +421,9 @@ class GitSync(NewBase):
                     out.einfo(f"Using keys from {self.repo.sync_openpgp_key_path}")
                     with open(self.repo.sync_openpgp_key_path, "rb") as f:
                         openpgp_env.import_key(f)
-                    self._refresh_keys(openpgp_env)
+                    if "--forceWKDupdate" in opts:
+                        out.einfo(f"Forcing keys update due to --forceWKDupdate arg... this is git module.")
+                        self._refresh_keys(openpgp_env)
                 except (GematoException, asyncio.TimeoutError) as e:
                     writemsg_level(
                         f"!!! Verification impossible due to keyring problem:\n{e}\n",
Index: /var/tmp/portage/sys-apps/portage-3.0.44/work/portage-3.0.44/lib/portage/sync/modules/rsync/rsync.py
===================================================================
--- .orig/var/tmp/portage/sys-apps/portage-3.0.44/work/portage-3.0.44/lib/portage/sync/modules/rsync/rsync.py
+++ portage-3.0.44/lib/portage/sync/modules/rsync/rsync.py
@@ -162,7 +162,9 @@ class RsyncSync(NewBase):
                     out.einfo(f"Using keys from {self.repo.sync_openpgp_key_path}")
                     with open(self.repo.sync_openpgp_key_path, "rb") as f:
                         openpgp_env.import_key(f)
-                    self._refresh_keys(openpgp_env)
+                    if "--forceWKDupdate" in opts:
+                        out.einfo(f"Forcing keys update due to --forceWKDupdate arg... this is rsync module.")
+                        self._refresh_keys(openpgp_env)
                 except (GematoException, asyncio.TimeoutError) as e:
                     writemsg_level(
                         "!!! Manifest verification impossible due to keyring problem:\n%s\n"
#FIXME: for sys-apps/portage-3.0.52
#Index: /var/tmp/portage/sys-apps/portage-3.0.44/work/portage-3.0.44/lib/portage/sync/modules/webrsync/webrsync.py
#===================================================================
#--- .orig/var/tmp/portage/sys-apps/portage-3.0.44/work/portage-3.0.44/lib/portage/sync/modules/webrsync/webrsync.py
#+++ portage-3.0.44/lib/portage/sync/modules/webrsync/webrsync.py
#@@ -99,7 +99,9 @@ class WebRsync(SyncBase):
#                     out.einfo(f"Using keys from {self.repo.sync_openpgp_key_path}")
#                     with open(self.repo.sync_openpgp_key_path, "rb") as f:
#                         openpgp_env.import_key(f)
#-                    self._refresh_keys(openpgp_env)
#+                    if "--forceWKDupdate" in opts:
#+                        out.einfo(f"Forcing keys update due to --forceWKDupdate arg... this is webrsync module.")
#+                        self._refresh_keys(openpgp_env)
#                     self.spawn_kwargs["env"]["PORTAGE_GPG_DIR"] = openpgp_env.home
#                     self.spawn_kwargs["env"]["PORTAGE_TEMP_GPG_DIR"] = openpgp_env.home
#                 except (GematoException, asyncio.TimeoutError) as e:
Index: /var/tmp/portage/sys-apps/portage-3.0.44/work/portage-3.0.44/lib/portage/sync/syncbase.py
===================================================================
--- .orig/var/tmp/portage/sys-apps/portage-3.0.44/work/portage-3.0.44/lib/portage/sync/syncbase.py
+++ portage-3.0.44/lib/portage/sync/syncbase.py
@@ -283,10 +283,20 @@ class SyncBase:
             return
 
         out.ebegin("Refreshing keys via WKD")
-        if openpgp_env.refresh_keys_wkd():
+        if openpgp_env.refresh_keys_wkd(Force=True):  #Force=True differentiates from other calls to refresh_keys_wkd, if any! yes at least one: gemato verify /var/db/repos/gentoo -K /usr/share/openpgp-keys/gentoo-release.asc --one-file-system --require-signed-manifest  --debug
             out.eend(0)
             return
         out.eend(1)
+        #print(openpgp_env) #it's a complex object TODO: how to print it!
+        #actually I won't be needing WKD refresh because since I'm sync-ing daily I won't miss an update to:
+        #app-crypt/openpgp-keys-gentoo-release-20191030 (/usr/share/openpgp-keys/gentoo-release.asc)
+        # which has that .asc key which would be kept up to date!
+        #otherwise gemato wkd will make a /tmp/ dir to import keys into and use it to verify the repo, which means
+        # it can be temporarily fooled (since it's just fetching keys via https, and BGP hijacking is a thing) into
+        # fetching evil keys, coupled with similar mitm rsync-ed repo, bam hijacked system, if even just temporarily
+        # you won't even know if it happened, since next rsync/wkd could be normal, once the rootkit hid and cleaned up.
+        raise Exception("WKD refresh failed!")
+        #yeah don't use keyserver from below!
 
         out.ebegin(
             "Refreshing keys from keyserver{}".format(
