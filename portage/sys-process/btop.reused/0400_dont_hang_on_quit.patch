and possibly don't hang if running long time too? unsure
anyway this is the one that gets fixed for sure:
https://github.com/aristocratos/btop/issues/47#issuecomment-2056046776

and the next comment is the one i hope also got fixed?! but can't really know

diff --git a/src/btop.cpp b/src/btop.cpp
index 8eae107..b058017 100644
--- a/src/btop.cpp
+++ b/src/btop.cpp
@@ -56,6 +56,10 @@ tab-size = 4
 #include "fmt/core.h"
 #include "fmt/ostream.h"
 
+#include <cassert>
+// Define custom assert_eq macro
+#define assert_eq(expected, actual) assert((expected) == (actual))
+
 using std::atomic;
 using std::cout;
 using std::flush;
@@ -289,8 +293,14 @@ void term_resize(bool force) {
 
 //* Exit handler; stops threads, restores terminal and saves config changes
 void clean_quit(int sig) {
-	if (Global::quitting) return;
-	Global::quitting = true;
+	bool expected = false;
+	if (!Global::quitting.compare_exchange_strong(expected, true)) {
+		//return of false ^ means the exchange wasn't made because expected value wasn't false
+		assert_eq(true,expected);//aka the prev. value was 'true'
+			return; // quitting was already true
+	} else {
+		assert_eq(false,expected);//prev. value
+	}
 	Runner::stop();
 	if (Global::_runner_started) {
 	#if defined __APPLE__ || defined __OpenBSD__
@@ -419,6 +429,7 @@ void init_config(){
 //* Manages secondary thread for collection and drawing of boxes
 namespace Runner {
 	atomic<bool> active (false);
+	//atomic<bool> activated_once (false);
 	atomic<bool> stopping (false);
 	atomic<bool> waiting (false);
 	atomic<bool> redraw (false);
@@ -808,16 +819,33 @@ namespace Runner {
 	//* Runs collect and draw in a secondary thread, unlocks and locks config to update cached values
 	void run(const string& box, bool no_update, bool force_redraw) {
 		atomic_wait_for(active, true, 5000);
-		if (active) {
+		//^ so that waits for 5 sec or until active becomes 'true', whichever's first.
+		//if (!activated_once) {//FIXME: remove this, was emulating this: https://github.com/aristocratos/btop/issues/47#issuecomment-2056046776  which requires pressing 'q' to quit, once this happens.
+		//	active=true;
+		//	activated_once=true;
+		//}
+		bool expected_active=true;
+		if (active.compare_exchange_strong(expected_active, false)) {
+			//^ true return means was changed from 'true' to 'false'
+			assert_eq(true,expected_active);//prev value was.
+		//if (active) {
 			Logger::error("Stall in Runner thread, restarting!");
-			active = false;
 			// exit(1);
 			pthread_cancel(Runner::runner_id);
+			sleep_ms(2000);//TODO: ^ that's async, do we need to wait at all before creating new? just gonna wait to be sure, for now.
 			if (pthread_create(&Runner::runner_id, nullptr, &Runner::_runner, nullptr) != 0) {
+				Logger::error("Failed to re-create _runner thread!1!");
 				Global::exit_error_msg = "Failed to re-create _runner thread!";
 				clean_quit(1);
+				Logger::error("Failed to re-create _runner thread!2!");
 			}
+			//active = false;
+			Logger::error("Succeeded in restarting runner thread!");
+		} else {
+			//^ false means was NOT changed from 'true' to 'false', because prev. value was false
+			assert_eq(false,expected_active);//prev. value was.
 		}
+
 		if (stopping or Global::resized) return;
 
 		if (box == "overlay") {
@@ -849,29 +877,62 @@ namespace Runner {
 
 	//* Stops any work being done in runner thread and checks for thread errors
 	void stop() {
+			Logger::error("stop() starting");
 		stopping = true;
 		int ret = pthread_mutex_trylock(&mtx);
 		if (ret != EBUSY and not Global::quitting) {
-			if (active) active = false;
+			bool expected_active=true;
+			if (active.compare_exchange_strong(expected_active,false)) {
+				//was changed, so:
+				assert_eq(true, expected_active);//prev value was.
+			} else {
+				//wasn't changed because prev. value was not the expected 'true' one
+				assert_eq(false, expected_active);
+			}
 			Global::exit_error_msg = "Runner thread died unexpectedly!";
+			Logger::error("stop() Runner thread died unexpectedly! quitting clean");
 			clean_quit(1);
 		}
 		else if (ret == EBUSY) {
+			Logger::error("stop() EBUSY");
 			atomic_wait_for(active, true, 5000);
-			if (active) {
-				active = false;
+			bool expected_active=true;
+			if (active.compare_exchange_strong(expected_active, false)) {
+				//was changed
+				assert_eq(true, expected_active);//prev. value was.
+					Logger::error("stop() was active");
+			//if (active) {
+				//active = false;
 				if (Global::quitting) {
+					Logger::error("stop() quitting");
 					return;
 				}
 				else {
 					Global::exit_error_msg = "No response from Runner thread, quitting!";
+					Logger::error("stop() No response from Runner thread, quitting!");
 					clean_quit(1);
 				}
+			} else {
+				//wasn't changed, so:
+				assert_eq(false, expected_active);//this was the prev. value
 			}
+
+			Logger::error("stop() about to thread_trigger");
 			thread_trigger();
+			Logger::error("stop() waiting for active=false");
 			atomic_wait_for(active, false, 100);
+			Logger::error("stop() waited for active=false");
 			atomic_wait_for(active, true, 100);
+			Logger::error("stop() waited for active=true");
+		} else {
+			//so this is ret==0, but could be different i guess, that's just what i saw so far!
+			//so ret==BUSY above gets hit on 'q' quit unless the runner thread got restarted at least once
+			//so to get ret==0 the runner thread must've restarted 1+ times.
+			//Logger::error("stop() a different ret=",ret);
+			Logger::log_write(Logger::ERROR, "stop() a different ret=" + std::to_string(ret));
+			thread_trigger();
 		}
+			Logger::error("stop() stopping false");
 		stopping = false;
 	}
 
