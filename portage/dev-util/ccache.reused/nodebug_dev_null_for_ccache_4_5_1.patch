ignore /dev/null when debug is used

but i don't remember how debug was used, maybe by setting a log file via CCACHE_LOGFILE= env. var
and also enabling CCACHE_DEBUG=1
this would create multiple files based on the name of the log file, i think
which would be bad if CCACHE_LOGFILE=/dev/null

#Index: /var/tmp/portage/dev-util/ccache-4.1/work/ccache-4.1/src/ccache.cpp
#===================================================================
#--- .orig/var/tmp/portage/dev-util/ccache-4.1/work/ccache-4.1/src/ccache.cpp
#+++ /var/tmp/portage/dev-util/ccache-4.1/work/ccache-4.1/src/ccache.cpp
#--- a/src/ccache.cpp
#+++ b/src/ccache.cpp
Index: /var/tmp/portage/dev-util/ccache-4.2.1/work/ccache-4.2.1/src/ccache.cpp
===================================================================
--- ccache-4.2.1/src/ccache.cpp
+++ ccache-4.2.1/src/ccache.cpp
@@ -239,7 +239,7 @@ init_hash_debug(Context& ctx,
                 string_view section_name,
                 FILE* debug_text_file)
 {
-  if (!ctx.config.debug()) {
+  if ((!ctx.config.debug()) || (std::string("/dev/null").compare(ctx.args_info.output_obj) == 0)) {
     return;
   }
 
@@ -2169,6 +2169,9 @@ finalize_at_exit(Context& ctx)
   }
 
   // Dump log buffer last to not lose any logs.
+  if ((!ctx.config.debug()) || (std::string("/dev/null").compare(ctx.args_info.output_obj) == 0)) {
+    return;
+  } else
   if (ctx.config.debug() && !ctx.args_info.output_obj.empty()) {
     const auto path = FMT("{}.ccache-log", ctx.args_info.output_obj);
     Logging::dump_log(path);
#This following chunk failed on 4.5.1 and thus got updated below:
#@@ -2252,7 +2255,7 @@ do_cache_compilation(Context& ctx, const
#   }
#   MTR_END("main", "clean_up_internal_tempdir");
# 
#-  if (!ctx.config.log_file().empty() || ctx.config.debug()) {
#+  if (!ctx.config.log_file().empty() || (ctx.config.debug()&&(std::string("/dev/null").compare(ctx.args_info.output_obj) != 0))) {
#     ctx.config.visit_items(configuration_logger);
#   }
# 
@@ -2425,7 +2425,7 @@ do_cache_compilation(Context& ctx, const
   LOG("Object file: {}", ctx.args_info.output_obj);
   MTR_META_THREAD_NAME(ctx.args_info.output_obj.c_str());
 
-  if (ctx.config.debug()) {
+  if ((ctx.config.debug())&&(std::string("/dev/null").compare(ctx.args_info.output_obj) != 0)) {
     const auto path = prepare_debug_path(
       ctx.config.debug_dir(), ctx.args_info.output_obj, "input-text");
     File debug_text_file(path, "w");
Index: /var/tmp/portage/dev-util/ccache-4.5.1/work/ccache-4.5.1/src/ccache.cpp
===================================================================
--- ccache-4.5.1/src/ccache.cpp
+++ ccache-4.5.1/src/ccache.cpp
@@ -1975,17 +1975,18 @@ cache_compilation(int argc, const char*
 static nonstd::expected<core::StatisticsCounters, Failure>
 do_cache_compilation(Context& ctx, const char* const* argv)
 {
   if (ctx.actual_cwd.empty()) {
     LOG("Unable to determine current working directory: {}", strerror(errno));
     return nonstd::make_unexpected(Statistic::internal_error);
   }
 
-  if (!ctx.config.log_file().empty() || ctx.config.debug()) {
+  //if (!ctx.config.log_file().empty() || ctx.config.debug()) {
+  if (!ctx.config.log_file().empty() || (ctx.config.debug()&&(std::string("/dev/null").compare(ctx.args_info.output_obj) != 0))) {
     ctx.config.visit_items([&ctx](const std::string& key,
                                   const std::string& value,
                                   const std::string& origin) {
       const auto& log_value =
         key == "secondary_storage"
           ? ctx.storage.get_secondary_storage_config_for_logging()
           : value;
       BULK_LOG("Config: ({}) {} = {}", origin, key, log_value);
