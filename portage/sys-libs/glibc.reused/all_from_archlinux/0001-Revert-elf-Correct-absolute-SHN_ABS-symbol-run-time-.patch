From 7d0f675e8f8a21ccfb2b153194edeb5094425fa7 Mon Sep 17 00:00:00 2001
From: Eli Schwartz <eschwartz@archlinux.org>
Date: Fri, 28 Sep 2018 05:19:46 +0000
Subject: [PATCH] Revert "elf: Correct absolute (SHN_ABS) symbol run-time
 calculation [BZ #19818]"

This reverts commit e7feec374c635b6a29d65c39ae5e1855528fed39.
---
 elf/Makefile                 |  4 ++--
 elf/dl-addr.c                |  2 --
 elf/tst-absolute-sym-lib.c   | 25 ------------------------
 elf/tst-absolute-sym-lib.lds | 19 ------------------
 elf/tst-absolute-sym.c       | 38 ------------------------------------
 sysdeps/generic/ldsodefs.h   |  3 +--
 6 files changed, 3 insertions(+), 88 deletions(-)
 delete mode 100644 elf/tst-absolute-sym-lib.c
 delete mode 100644 elf/tst-absolute-sym-lib.lds
 delete mode 100644 elf/tst-absolute-sym.c

diff --git a/elf/Makefile b/elf/Makefile
index d470e41402..2ff8fe3d7f 100644
--- a/elf/Makefile
+++ b/elf/Makefile
@@ -190,7 +190,7 @@ tests += restest1 preloadtest loadfail multiload origtest resolvfail \
 	 tst-tlsalign tst-tlsalign-extern tst-nodelete-opened \
 	 tst-nodelete2 tst-audit11 tst-audit12 tst-dlsym-error tst-noload \
 	 tst-latepthread tst-tls-manydynamic tst-nodelete-dlclose \
-	 tst-debug1 tst-main1 tst-absolute-sym tst-absolute-zero tst-big-note \
+	 tst-debug1 tst-main1 tst-absolute-zero tst-big-note \
 	 tst-unwind-ctor tst-unwind-main tst-audit13 \
 	 tst-sonamemove-link tst-sonamemove-dlopen tst-dlopen-aout
 #	 reldep9
@@ -276,7 +276,7 @@ modules-names = testobj1 testobj2 testobj3 testobj4 testobj5 testobj6 \
 		tst-audit12mod1 tst-audit12mod2 tst-audit12mod3 tst-auditmod12 \
 		tst-latepthreadmod $(tst-tls-many-dynamic-modules) \
 		tst-nodelete-dlclose-dso tst-nodelete-dlclose-plugin \
-		tst-main1mod tst-libc_dlvsym-dso tst-absolute-sym-lib \
+		tst-main1mod tst-libc_dlvsym-dso \
 		tst-absolute-zero-lib tst-big-note-lib tst-unwind-ctor-lib \
 		tst-audit13mod1 tst-sonamemove-linkmod1 \
 		tst-sonamemove-runmod1 tst-sonamemove-runmod2
diff --git a/elf/dl-addr.c b/elf/dl-addr.c
index 9d285d76a7..0dd7d1dde9 100644
--- a/elf/dl-addr.c
+++ b/elf/dl-addr.c
#@@ -59,7 +59,6 @@ determine_info (const ElfW(Addr) addr, struct link_map *match, Dl_info *info,
# 		     we can omit that test here.  */
# 		  if ((symtab[symndx].st_shndx != SHN_UNDEF
# 		       || symtab[symndx].st_value != 0)
#-		      && symtab[symndx].st_shndx != SHN_ABS
# 		      && ELFW(ST_TYPE) (symtab[symndx].st_info) != STT_TLS
# 		      && DL_ADDR_SYM_MATCH (match, &symtab[symndx],
# 					    matchsym, addr)
@@ -60,7 +60,6 @@ determine_info (const ElfW(Addr) addr, struct link_map *match, Dl_info *info,
 		  symndx = ELF_MACHINE_HASH_SYMIDX (match, hasharr);
 		  if ((symtab[symndx].st_shndx != SHN_UNDEF
 		       || symtab[symndx].st_value != 0)
-		      && symtab[symndx].st_shndx != SHN_ABS
 		      && ELFW(ST_TYPE) (symtab[symndx].st_info) != STT_TLS
 		      && DL_ADDR_SYM_MATCH (match, &symtab[symndx],
 					    matchsym, addr)
@@ -92,7 +91,6 @@ determine_info (const ElfW(Addr) addr, struct link_map *match, Dl_info *info,
 	    && ELFW(ST_TYPE) (symtab->st_info) != STT_TLS
 	    && (symtab->st_shndx != SHN_UNDEF
 		|| symtab->st_value != 0)
-	    && symtab->st_shndx != SHN_ABS
 	    && DL_ADDR_SYM_MATCH (match, symtab, matchsym, addr)
 	    && symtab->st_name < strtabsize)
 	  matchsym = (ElfW(Sym) *) symtab;
diff --git a/elf/tst-absolute-sym-lib.c b/elf/tst-absolute-sym-lib.c
deleted file mode 100644
index e0becab58e..0000000000
--- a/elf/tst-absolute-sym-lib.c
+++ /dev/null
@@ -1,25 +0,0 @@
-/* BZ #19818 absolute symbol calculation shared module.
-   Copyright (C) 2018-2019 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-extern char absolute;
-
-void *
-get_absolute (void)
-{
-  return &absolute;
-}
diff --git a/elf/tst-absolute-sym-lib.lds b/elf/tst-absolute-sym-lib.lds
deleted file mode 100644
index fcb990116a..0000000000
--- a/elf/tst-absolute-sym-lib.lds
+++ /dev/null
@@ -1,19 +0,0 @@
-/* BZ #19818 absolute symbol calculation linker script.
-   Copyright (C) 2018-2019 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-"absolute" = 0x55aa;
diff --git a/elf/tst-absolute-sym.c b/elf/tst-absolute-sym.c
deleted file mode 100644
index c641f7ecdf..0000000000
--- a/elf/tst-absolute-sym.c
+++ /dev/null
@@ -1,38 +0,0 @@
-/* BZ #19818 absolute symbol calculation main executable.
-   Copyright (C) 2018-2019 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
-
-#include <support/check.h>
-#include <support/support.h>
-#include <support/test-driver.h>
-
-void *get_absolute (void);
-
-static int
-do_test (void)
-{
-  void *ref = (void *) 0x55aa;
-  void *ptr;
-
-  ptr = get_absolute ();
-  if (ptr != ref)
-    FAIL_EXIT1 ("Got %p, expected %p\n", ptr, ref);
-
-  return 0;
-}
-
-#include <support/test-driver.c>
diff --git a/sysdeps/generic/ldsodefs.h b/sysdeps/generic/ldsodefs.h
index b1fc5c31f9..41f3415e6c 100644
--- a/sysdeps/generic/ldsodefs.h
+++ b/sysdeps/generic/ldsodefs.h
@@ -72,8 +72,7 @@ typedef struct link_map *lookup_t;
    if non-NULL.  Don't check for NULL map if MAP_SET is TRUE.  */
 #define SYMBOL_ADDRESS(map, ref, map_set)				\
   ((ref) == NULL ? 0							\
-   : (__glibc_unlikely ((ref)->st_shndx == SHN_ABS) ? 0			\
-      : LOOKUP_VALUE_ADDRESS (map, map_set)) + (ref)->st_value)
+   : LOOKUP_VALUE_ADDRESS (map, map_set) + (ref)->st_value)
 
 /* On some architectures a pointer to a function is not just a pointer
    to the actual code of the function but rather an architecture
-- 
2.23.0

